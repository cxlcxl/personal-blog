<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Silent 代码搬运工</title>
    <link>https://www.silent-cxl.top/posts/</link>
    <description>Recent content in Posts on Silent 代码搬运工</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>粤ICP备2022145969号-1</copyright>
    <lastBuildDate>Tue, 06 Dec 2022 10:56:41 +0800</lastBuildDate><atom:link href="https://www.silent-cxl.top/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>VirtualBox 虚拟机 Read-only file system</title>
      <link>https://www.silent-cxl.top/posts/virtual-read-only-file-system/</link>
      <pubDate>Tue, 06 Dec 2022 10:56:41 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/virtual-read-only-file-system/</guid>
      <description>在虚拟机中创建软连接时报错 Read-only file system，修改方法如下
关闭虚拟机 用管理员身份启用cmd，进入到虚拟机安装目录(C:\Program Files\Oracle\VirtualBox) 运行以下命令 1VBoxManage setextradata YOURVMNAME VBoxInternal2/SharedFoldersEnableSymlinksCreate/YOURSHAREFOLDERNAME 1 YOURVMNAME ：虚拟机中系统名称 YOURSHAREFOLDERNAME ：虚拟机本地共享文件夹名称(不用带路径) 查看是否配置成功
1VBoxManage getextradata YOURVMNAME enumerate 参考博文：https://ahtik.com/fixing-your-virtualbox-shared-folder-symlink-error/</description>
    </item>
    
    <item>
      <title>Docker Compose Port Is Already Allocated</title>
      <link>https://www.silent-cxl.top/posts/docker-compose-port-is-already-allocated/</link>
      <pubDate>Tue, 06 Dec 2022 10:54:37 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/docker-compose-port-is-already-allocated/</guid>
      <description>1ERROR: for local_nginx Cannot start service nginx: driver failed programming external connectivity on endpoint local_nginx (c3d788a28999dc7888524cd93d63a5dac3da0fe00d9c7d8a09e8bb815005b9f0): Bind for 0.0.0.0:8098 failed: port is already allocated 容器没有运行了，但是端口还在绑定占用
解决：
systemctl stop docker.service rm /var/lib/docker/network/files/local-kv.db systemctl restart docker.service </description>
    </item>
    
    <item>
      <title>Css 文字色彩动画</title>
      <link>https://www.silent-cxl.top/posts/css-font-color-animation/</link>
      <pubDate>Mon, 05 Dec 2022 14:26:59 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/css-font-color-animation/</guid>
      <description>记录一个遇到的文字色彩动画
1.example { 2 display: block; 3 text-decoration: none; 4 background-image: -webkit-linear-gradient( 5 left, 6 #3498db, 7 #f47920 10%, 8 #d71345 20%, 9 #f7acbc 30%, 10 #ffd400 40%, 11 #3498db 50%, 12 #f47920 60%, 13 #d71345 70%, 14 #f7acbc 80%, 15 #ffd400 90%, 16 #3498db 17 ); 18 color: transparent; 19 -webkit-background-clip: text; 20 background-size: 200% 100%; 21 animation: slide 5s infinite linear; 22 font-size: 40px; 23} 24 25@keyframes slide { 26 0% { 27 background-position: 0 0; 28 } 29 100% { 30 background-position: -100% 0; 31 } 32} 原地址：图片裁剪</description>
    </item>
    
    <item>
      <title>记录 Github Actions 实现代码提交自动部署</title>
      <link>https://www.silent-cxl.top/posts/deploy-github-actions/</link>
      <pubDate>Wed, 30 Nov 2022 11:04:47 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/deploy-github-actions/</guid>
      <description>先上 github-acitons 部署 yml 文件内容 1name: 部署到服务器 2on: 3 push: 4 branches: [ &amp;#34;master&amp;#34; ] # master 分支有提交自动部署 5 6permissions: write-all 7jobs: 8 deploy: 9 name: Deploy 10 runs-on: ubuntu-latest 11 environment: production 12 13 steps: 14 # 获取源码 master 分支，也可以写 tag 版本 15 - name: Checkout 16 uses: actions/checkout@master 17 18 # 使用到的这个 easingthemes/ssh-deploy actions，main 表示主分支 19 # 可以直接仓库搜索到：easingthemes/ssh-deploy，有介绍下面的配置项 20 - name: 部署到服务器 21 uses: easingthemes/ssh-deploy@main 22 env: 23 SSH_PRIVATE_KEY: ${{ secrets.</description>
    </item>
    
    <item>
      <title>Go 打乱数据排序</title>
      <link>https://www.silent-cxl.top/posts/golang-shuffle/</link>
      <pubDate>Tue, 29 Nov 2022 14:39:24 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/golang-shuffle/</guid>
      <description> 1// func shuffle[T any](slice []T) { // go1.18 及以上 2func shuffle(slice []int64) { 3 if len(slice) == 1 { 4 return 5 } 6 r := rand.New(rand.NewSource(time.Now().UnixNano())) 7 for len(slice) &amp;gt; 0 { 8 n := len(slice) 9 randIndex := r.Intn(n) 10 slice[n-1], slice[randIndex] = slice[randIndex], slice[n-1] 11 slice = slice[:n-1] 12 } 13} </description>
    </item>
    
    <item>
      <title>使用 Hugo 搭建自己的博客</title>
      <link>https://www.silent-cxl.top/posts/hugo-build-blog/</link>
      <pubDate>Thu, 24 Nov 2022 20:48:28 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/hugo-build-blog/</guid>
      <description>Hugo 的安装 安装可查看 官方文档 安装完成后按照文档的快速启动项目操作 1# 创建一个项目 2hugo new site [项目名称，如：myblog] 3 4# 进入你的项目，后面所有的命令都是在项目根目录执行（未特殊标明的） 5cd myblog 6 7# 初始化 git 仓库 8git init 9git remote add origin [你的 github/gitee/gitlab 仓库地址] 下载一个你喜欢的主题 官方文档 主题库 这里有很多 我使用的是这个 主题 stars 还挺多的 直接在你的项目目录执行下面 git 命令就可以了 1git clone [主题仓库地址] themes/主题名 配置你的主题 项目根目录 config.toml 文件 1# 设置主题 2theme = &amp;#34;PaperMod&amp;#34; 具体主题相关配置可按照自己下载的主体来，如我使用的这个主体可以在他的仓库看下有 exampleSite 分支，切到这个分支下可找到 config.yml 文件 PS：如果主题的配置文件是 yml 或 yaml 格式，可以随便百度或 google yml to toml 解决配置转换问题
创建你的内容 运行如下命令 1hugo new posts/first-post.</description>
    </item>
    
    <item>
      <title>Hugo PaperMod 开启评论</title>
      <link>https://www.silent-cxl.top/posts/hugo-supprt-comments/</link>
      <pubDate>Thu, 24 Nov 2022 20:29:38 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/hugo-supprt-comments/</guid>
      <description>创建评论使用的 github 仓库 操作步骤如下图（utteranc 的操作截图） giscus 驱动与 utteranc 驱动开启操作大同小异，步骤基本相同 创建好后如我的：https://github.com/cxlcxl/comments-for-hugo，而后可在最底下的 Enable Utterances 部分取到配置 Hugo 配置文件文件修改 config.toml
1[params] 2# ... 3comments = true 4 #使用的是 utteranc 评论，教程参考 https://utteranc.es/ 5 [params.utteranc] 6 enable = false 7 repo = &amp;#34;cxlcxl/comments-for-hugo&amp;#34; # 改成自己的配置 8 issueTerm = &amp;#34;pathname&amp;#34; 9 theme = &amp;#34;github-light&amp;#34; 10 11 ## 配置 giscus 评论,教程参考 https://giscus.app/zh-CN 12 [params.giscus] 13 enable = true 14 repo = &amp;#34;cxlcxl/comments-for-hugo&amp;#34; # 改成自己的配置 15 repoId = &amp;#34;&amp;#34; 16 category = &amp;#34;&amp;#34; 17 categoryId = &amp;#34;&amp;#34; 18 mapping = &amp;#34;pathname&amp;#34; 19 theme = &amp;#34;light_protanopia&amp;#34; 20 lang = &amp;#34;zh-CN&amp;#34; 21 crossorigin = &amp;#34;anonymous&amp;#34; comments.</description>
    </item>
    
    <item>
      <title>K8s 上 Go-Zero 服务本机手动部署记录</title>
      <link>https://www.silent-cxl.top/posts/k8s-go-zero-deploy/</link>
      <pubDate>Thu, 24 Nov 2022 15:42:05 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/k8s-go-zero-deploy/</guid>
      <description>创建命名空间 如果在default命名空间上可以跳过此步骤 1kubectl create ns bs 2 3// 可以查看刚刚创建的 namespace 4kubectl get ns 创建 k8s 账号权限 创建 ads-test-auth.yaml 配置文件如下 1#创建账号 2apiVersion: v1 3kind: ServiceAccount 4metadata: 5 namespace: bs 6 name: ads-test 7 8--- 9#创建角色对应操作 10apiVersion: rbac.authorization.k8s.io/v1 11kind: ClusterRole 12metadata: 13 name: discovery-ads-test 14rules: 15- apiGroups: [&amp;#34;&amp;#34;] 16 resources: [&amp;#34;endpoints&amp;#34;] # endpoints 17 verbs: [&amp;#34;get&amp;#34;,&amp;#34;list&amp;#34;,&amp;#34;watch&amp;#34;] 18 19--- 20#给账号绑定角色 21apiVersion: rbac.authorization.k8s.io/v1 22kind: ClusterRoleBinding 23metadata: 24 name: find-ads-test-discovery-ads-test 25roleRef: 26 apiGroup: rbac.authorization.k8s.io 27 kind: ClusterRole 28 name: discovery-ads-test 29subjects: 30- kind: ServiceAccount 31 name: ads-test 32 namespace: bs 运行 kubectl apply -f ads-test-auth.</description>
    </item>
    
    <item>
      <title>Git 忽略文件使用</title>
      <link>https://www.silent-cxl.top/posts/git-ignore-use/</link>
      <pubDate>Thu, 24 Nov 2022 11:11:31 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/git-ignore-use/</guid>
      <description> 匹配中间文件夹 示例 .gitignore 内容：匹配 app 下的所有模块文件夹下 config 下以 .pro.yaml 结尾的文件
1// app/user/config/databse.pro.yaml 2// app/goods/config/databse.pro.yaml 3// ... 4app/**/config/*.pro.yaml 忽略已被提交到远程仓库的文件 先移除本地 git 缓存 1git rm --cached [要忽略的文件路径] 补充 .gitignore 文件内容即可 </description>
    </item>
    
    <item>
      <title>进制转换</title>
      <link>https://www.silent-cxl.top/posts/computer-conversion/</link>
      <pubDate>Wed, 23 Nov 2022 14:31:06 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/computer-conversion/</guid>
      <description>世界上有 10 种人，懂二进制和不懂二进制的，实际上二进制只有 0 和 1，逢 2 进 1，所以 10 在二进制中并不是十进制的 10 而是十进制的 2。
进制就是逢几进一，n 进制就是逢 n 进一。计算机只能识别二进制，人类最习惯使用的是十进制，而为了实际需要，又建立了八进制和十六进制。八进制就是逢八进一，十六进制就是逢十六进一。
二进制转十进制 例二进制数：10010110，可转换如下
1 1 0 0 1 0 1 1 0 // 二进制 21*2^7 + 0*2^6 + 0*2^5 + 1*2^4 + 0*2^3 + 1*2^2 + 1*2^1 + 0*2^0 3128 + 0 + 0 + 16 + 0 + 4 + 2 + 0 = 150 // 十进制 八进制转十进制 八进制：只有 0~7，逢 8 进 1</description>
    </item>
    
    <item>
      <title>Vue3 Vite 使用基础配置</title>
      <link>https://www.silent-cxl.top/posts/vue-vite/</link>
      <pubDate>Tue, 22 Nov 2022 17:53:38 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/vue-vite/</guid>
      <description>1import { defineConfig, loadEnv } from &amp;#34;vite&amp;#34; 2import vue from &amp;#34;@vitejs/plugin-vue&amp;#34; 3import path from &amp;#34;path&amp;#34; 4import { nodePolyfills } from &amp;#34;vite-plugin-node-polyfills&amp;#34; 5 6// https://vitejs.dev/config/ 7export default defineConfig(({ command, mode }) =&amp;gt; { 8 console.log(&amp;#34;vite.config defineConfig&amp;#34;, command, mode) 9 const env = loadEnv(mode, process.cwd(), &amp;#34;&amp;#34;) 10 return { 11 plugins: [ 12 vue(), 13 nodePolyfills({ 14 protocolImports: true, 15 }), 16 ], 17 resolve: { 18 alias: { 19 &amp;#34;@&amp;#34;: path.</description>
    </item>
    
    <item>
      <title>Vue3 使用 Vuex 做登录信息</title>
      <link>https://www.silent-cxl.top/posts/vue-vuex/</link>
      <pubDate>Tue, 22 Nov 2022 17:26:30 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/vue-vuex/</guid>
      <description>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。
目录结构：
1|--public 2|--src 3... 4|----store # 新建 vuex 相关文件夹 5|------modules # 新建模块文件夹，存放 app.js,user.js 6|--------global.js 7|--------getters.js 8|--------app.js 9|--------user.js store 文件夹下创建 index.js 1import { createStore } from &amp;#34;vuex&amp;#34; 2 3import global from &amp;#34;./modules/global.js&amp;#34; 4import app from &amp;#34;./modules/app.js&amp;#34; // 应用基本数据 5import user from &amp;#34;./modules/user.js&amp;#34; // 登录信息 6import getters from &amp;#34;./modules/getters.js&amp;#34; 7 8export default createStore({ 9 // 公共模板直接在这里展开就可以 10 ...global, 11 modules: { 12 app, 13 user, 14 }, 15 getters, 16}) main.</description>
    </item>
    
    <item>
      <title>Vue3 页面登录拦截器</title>
      <link>https://www.silent-cxl.top/posts/vue-login-permission/</link>
      <pubDate>Tue, 22 Nov 2022 17:26:30 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/vue-login-permission/</guid>
      <description>直接上代码
1// intercept.js 2import NProgress from &amp;#34;nprogress&amp;#34; 3import &amp;#34;nprogress/nprogress.css&amp;#34; // progress bar style 4import store from &amp;#34;@/store&amp;#34; 5import router from &amp;#34;./router&amp;#34; 6import settings from &amp;#34;./settings&amp;#34; 7import { getToken } from &amp;#34;@/utils/token&amp;#34; 8import { ElMessage } from &amp;#34;element-plus&amp;#34; 9 10NProgress.configure({ showSpinner: false }) 11const excludeUris = [&amp;#34;/login&amp;#34;, &amp;#34;/sso/callback&amp;#34;] 12 13router.beforeEach(async (to, from, next) =&amp;gt; { 14 NProgress.start() 15 // 顺便设置 icon title 16 document.title = to.meta.title 17 ? `${to.meta.title} - ${settings.</description>
    </item>
    
    <item>
      <title>从远程仓库定时自动发版</title>
      <link>https://www.silent-cxl.top/posts/other-git-auto-publish/</link>
      <pubDate>Tue, 22 Nov 2022 14:15:52 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/other-git-auto-publish/</guid>
      <description>添加脚本文件到你期望存放的地址 1#!/bin/bash 2SITEDIR=/www/projects/site 3BAKDIR=/www/baks 4DAYS=7 5DATE=`date +%Y%m%d` 6REMOTE=`gitee/github/gitlab 仓库地址` 7 8# -c 压缩 9# -x 解压 10# -z 支持gzip解压文件 11# -v 显示操作过程 12# -f 使用档名，请留意，在f之后要立即接档名！不要再加参数！ 13tar -zcvf $BAKDIR/site-$DATE-bak.tar.gz $SITEDIR 14cd /www/projects/ 15rm -rf site 16 17git clone $REMOTE site 18 19# 删除过期备份文件 20# $bakdir find 备份文件的地址 21#-type f 类型为普通文件 22#-mtime 7 天之前的文件 23#-exec rm -f 静默删除匹配出来的文件 24# 还可以 -name &amp;#34;site-*-.tar.gz&amp;#34; 名称模糊匹配 25find $BAKDIR -type f -mtime +$DAYS -exec rm -f {} \; 26 27echo &amp;#34;complete!</description>
    </item>
    
    <item>
      <title>Golang 环境搭建</title>
      <link>https://www.silent-cxl.top/posts/golang-proxy/</link>
      <pubDate>Mon, 21 Nov 2022 17:54:32 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/golang-proxy/</guid>
      <description>遇到 go install 报错：.... dial tcp 172.217.160.113:443: i/o timeout 解决，终端执行：go env -w GOPROXY=https://goproxy.cn
待续&amp;hellip;</description>
    </item>
    
    <item>
      <title>Linux scp 文件管理</title>
      <link>https://www.silent-cxl.top/posts/linux-scp/</link>
      <pubDate>Mon, 21 Nov 2022 16:31:51 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/linux-scp/</guid>
      <description> 1# 从服务器上下载文件 2scp [服务器用户名]@[服务器IP]:[服务器文件] [本地目录] 3 4# 上传本地文件到服务器 5scp [本地文件] [服务器用户名]@[服务器IP]:[服务器目录] 6 7# 从服务器下载整个目录 8scp -r [服务器用户名]@[服务器IP]:[服务器目录] [本地目录] 9 10# 上传目录到服务器 11scp -r [本地目录] [服务器用户名]@[服务器IP]:[服务器目录] 12 13# 如果用到非 22 端口则在 scp 后使用 -P 参数 </description>
    </item>
    
    <item>
      <title>Virtual 本地虚拟机网络配置</title>
      <link>https://www.silent-cxl.top/posts/virtual-network/</link>
      <pubDate>Mon, 21 Nov 2022 15:34:03 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/virtual-network/</guid>
      <description> 虚拟机版本：CentOS Linux release 7.9.2009 (Core)
配置文件地址：/etc/sysconfig/network-scripts/ifcfg-enp0s3
1TYPE=Ethernet 2PROXY_METHOD=none 3BROWSER_ONLY=no 4BOOTPROTO=static 5DEFROUTE=yes 6IPADDR=192.168.120.61 7IPV4_FAILURE_FATAL=no 8IPV6INIT=yes 9IPV6_AUTOCONF=yes 10IPV6_DEFROUTE=yes 11IPV6_FAILURE_FATAL=no 12IPV6_ADDR_GEN_MODE=stable-privacy 13NAME=enp0s3 14UUID=03dae35b-d264-45e4-8d73-8920ab61cd02 15DEVICE=enp0s3 16ONBOOT=yes 17GETRWAY=192.168.56.1 18NETMASK=255.255.255.0 19DNS1=192.168.56.1 </description>
    </item>
    
    <item>
      <title>Vue el-tree 的 default-checked-keys 属性默认选中状态bug问题</title>
      <link>https://www.silent-cxl.top/posts/vue-element-tree-checked-bug/</link>
      <pubDate>Mon, 21 Nov 2022 15:31:53 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/vue-element-tree-checked-bug/</guid>
      <description>解决方式：
无需设置 default-checked-keys 属性
读取到接口数据后使用 this.$refs.tree.setCheckedNodes(***传入接口返回的节点 keys***) 设置默认； 提交前使用 this.$refs.tree.getCheckedKeys() 再次获取选中的节点并赋值 </description>
    </item>
    
    <item>
      <title>Virtual 虚拟机扩容（/dev/mapper/centos-root 空间不足）</title>
      <link>https://www.silent-cxl.top/posts/virtual-space-not-enough/</link>
      <pubDate>Mon, 21 Nov 2022 15:26:19 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/virtual-space-not-enough/</guid>
      <description>查看根分区大小 df -h
1文件系统 类型 容量 已用 可用 已用% 挂载点 2/dev/mapper/centos-root xfs 18G 1.1G 17G 6% / 3devtmpfs devtmpfs 479M 0 479M 0% /dev 4tmpfs tmpfs 489M 0 489M 0% /dev/shm 5tmpfs tmpfs 489M 6.7M 483M 2% /run 6tmpfs tmpfs 489M 0 489M 0% /sys/fs/cgroup 7/dev/sda1 xfs 497M 125M 373M 25% /boot 8tmpfs tmpfs 98M 0 98M 0% /run/user/0 在虚拟机中添加一块物理的磁盘，重起虚拟机 查看磁盘编号 ls /dev/sd*
1/dev/sda /dev/sda1 /dev/sda2 /dev/sdb 创建pv pvcreate /dev/sdb</description>
    </item>
    
    <item>
      <title>Git 解决每次 git pull 需要输入账号密码</title>
      <link>https://www.silent-cxl.top/posts/git-pull-repeat-enter-pass/</link>
      <pubDate>Mon, 21 Nov 2022 15:23:32 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/git-pull-repeat-enter-pass/</guid>
      <description>git bash 进入项目目录：
1git config --global credential.helper store 输入以上命令后，重新拉取代码再次输入账号密码，输入后会记住，以后拉代码不需要再输入。</description>
    </item>
    
    <item>
      <title>golang air 热更新使用</title>
      <link>https://www.silent-cxl.top/posts/golang-air/</link>
      <pubDate>Mon, 21 Nov 2022 11:25:27 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/golang-air/</guid>
      <description>首先安装 air 运行命令：go install github.com/cosmtrek/air@latest 项目根目录创建 air 配置文件：.air.conf mac 系统文件内容
1# .air.conf 文件内容 2root = &amp;#34;.&amp;#34; 3tmp_dir = &amp;#34;tmp&amp;#34; 4 5[build] 6# Just plain old shell command. You could use `make` as well. 7cmd = &amp;#34;go build -o ./tmp/main ./web/main.go&amp;#34; 8# Binary file yields from `cmd`. 9bin = &amp;#34;tmp/main&amp;#34; 10# Customize binary. 11full_bin = &amp;#34;APP_ENV=dev APP_USER=air ./tmp/main&amp;#34; 12# Watch these filename extensions. 13include_ext = [&amp;#34;go&amp;#34;, &amp;#34;tpl&amp;#34;, &amp;#34;tmpl&amp;#34;, &amp;#34;html&amp;#34;] 14# Ignore these filename extensions or directories.</description>
    </item>
    
    <item>
      <title>go-zero goctl 使用 proto 引入其他 proto 文件</title>
      <link>https://www.silent-cxl.top/posts/gozero-import-other-proto/</link>
      <pubDate>Mon, 21 Nov 2022 10:25:27 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/gozero-import-other-proto/</guid>
      <description>编写 proto 文件 1// role.proto 文件 2syntax = &amp;#34;proto3&amp;#34;; 3 4option go_package = &amp;#34;./marketing&amp;#34;; 5 6package marketing; 7 8message RoleCreateReq { 9 string role_name = 1; 10} 1// user.proto 文件 2syntax = &amp;#34;proto3&amp;#34;; 3 4option go_package = &amp;#34;./rbac&amp;#34;; 5 6package rbac; 7import &amp;#34;pb/role.proto&amp;#34;; // 以执行 goctl 命令为起始路径 8 9message UserCreateReq { 10 string username = 1; 11 string email = 2; 12} 13 14message BaseResp { 15 int64 code = 1; 16} 17 18service RbacCenter{ 19 // RPC 服务 20 rpc RoleCreate(RoleCreateReq) returns(BaseResp); 21 22 rpc UserCreate(UserCreateReq) returns(BaseResp); 23} 两个文件放在同一目录内</description>
    </item>
    
    <item>
      <title>K8s - 资源清单</title>
      <link>https://www.silent-cxl.top/posts/k8s-3-list/</link>
      <pubDate>Mon, 21 Nov 2022 10:25:27 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/k8s-3-list/</guid>
      <description>资源清单格式 1apiVersion: group/apiversion # 如果没有给定 group 名称，那么默认为 core，可以使用 kubectl api-versions # 获取当前 k8s 版本上所有的 apiVersion 版本信息( 每个版本可能不同 ) 2kind: #资源类别 3metadata： #资源元数据 4 name 5 namespace 6 lables 7 annotations # 主要目的是方便用户阅读查找 8spec: # 期望的状态（disired state） 9status：# 当前状态，本字段有 Kubernetes 自身维护，用户不能去定义 资源清单的常用命令 获取 apiversion 版本信息
1[root@k8s-master01 ~]# kubectl api-versions 2admissionregistration.k8s.io/v1beta1 3apiextensions.k8s.io/v1beta1 4apiregistration.k8s.io/v1 5apiregistration.k8s.io/v1beta1 6apps/v1 7......(以下省略) 获取资源的 apiVersion 版本信息
1[root@k8s-master01 ~]# kubectl explain pod 2KIND: Pod 3VERSION: v1 4.....(以下省略) 5 6[root@k8s-master01 ~]# kubectl explain Ingress 7KIND: Ingress 8VERSION: extensions/v1beta1 获取字段设置帮助文档</description>
    </item>
    
    <item>
      <title>K8s - Kubeadm 部署安装</title>
      <link>https://www.silent-cxl.top/posts/k8s-2-install/</link>
      <pubDate>Sun, 20 Nov 2022 10:25:27 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/k8s-2-install/</guid>
      <description>kube-proxy开启ipvs的前置条件 1modprobe br_netfilter 2 3cat &amp;gt; /etc/sysconfig/modules/ipvs.modules &amp;lt;&amp;lt;EOF 4#!/bin/bash 5modprobe -- ip_vs 6modprobe -- ip_vs_rr 7modprobe -- ip_vs_wrr 8modprobe -- ip_vs_sh 9modprobe -- nf_conntrack_ipv4 10EOF 11 12chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;amp;&amp;amp; bash /etc/sysconfig/modules/ipvs.modules &amp;amp;&amp;amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4 如果报错：modprobe: FATAL: Module nf_conntrack_ipv4 not found. 内核高版本的 nf_conntrack_ipv4 已被 nf_conntrack 替换，将以上的 nf_conntrack_ipv4 改为 nf_conntrack 重新执行。
安装 Docker 软件 1yum install -y yum-utils device-mapper-persistent-data lvm2 # docker 依赖包 2 3# docker 镜像源 4yum-config-manager \ 5 --add-repo \ 6 http://mirrors.</description>
    </item>
    
    <item>
      <title>K8s - 系统初始化</title>
      <link>https://www.silent-cxl.top/posts/k8s-1-init/</link>
      <pubDate>Sat, 19 Nov 2022 10:25:27 +0800</pubDate>
      
      <guid>https://www.silent-cxl.top/posts/k8s-1-init/</guid>
      <description>设置系统主机名 1hostnamectl set-hostname k8s-master01 安装依赖包 1yum install -y conntrack ntpdate ntp ipvsadm ipset iptables curl sysstat libseccomp wget vim net-tools git 设置 Iptables 1systemctl stop firewalld &amp;amp;&amp;amp; systemctl disable firewalld 2yum -y install iptables-services &amp;amp;&amp;amp; systemctl start iptables &amp;amp;&amp;amp; systemctl enable iptables &amp;amp;&amp;amp; iptables -F &amp;amp;&amp;amp; service iptables save 关闭 SELINUX 1swapoff -a &amp;amp;&amp;amp; sed -i &amp;#39;/ swap / s/^\(.*\)$/#\1/g&amp;#39; /etc/fstab 2setenforce 0 &amp;amp;&amp;amp; sed -i &amp;#39;s/^SELINUX=.*/SELINUX=disabled/&amp;#39; /etc/selinux/config 调整内核参数 1cat &amp;gt; kubernetes.</description>
    </item>
    
  </channel>
</rss>
